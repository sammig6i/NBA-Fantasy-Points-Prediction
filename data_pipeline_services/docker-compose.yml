x-common-env: &common-env
  MINIO_ENDPOINT: ${MINIO_ENDPOINT:-minio:9000}
  MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-nba-raw-data}
  MINIO_SECURE: ${MINIO_SECURE:-false}
  MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
  MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
  DB_HOST: postgres
  DB_PORT: ${DB_PORT:-5432}
  DB_NAME: ${DB_NAME:-airflow}
  DB_USER: ${DB_USER:-airflow}
  DB_PASSWORD: ${DB_PASSWORD:-airflow}
  AIRFLOW__CORE__EXECUTOR: LocalExecutor
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${DB_USER:-airflow}:${DB_PASSWORD:-airflow}@postgres/${DB_NAME:-airflow}
  AIRFLOW__CORE__LOAD_EXAMPLES: "False"
  AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS: "False"
  AIRFLOW__CORE__STORE_DAG_CODE: "True"
  AIRFLOW__CORE__STORE_SERIALIZED_DAGS: "True"
  PYTHONPATH: /opt/airflow:/opt/airflow/data_pipeline_services

networks:
  nba_network:
    name: nba_network

services:
  data_ingestion:
    image: ${DOCKER_REGISTRY}/data-ingestion:latest
    environment:
      <<: *common-env
      PYTHONPATH: /app
    volumes:
      - .:/app/data_pipeline_services
      - ../config:/app/config
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - nba_network

  data_processing:
    image: ${DOCKER_REGISTRY}/data-processing:latest
    environment:
      <<: *common-env
      PYTHONPATH: /app
    volumes:
      - .:/app/data_pipeline_services
      - ../config:/app/config
    depends_on:
      data_ingestion:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - nba_network

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - nba_network

  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - nba_network

  airflow-webserver:
    image: apache/airflow:2.10.1
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      <<: *common-env
    volumes:
      - ../airflow:/opt/airflow
      - ../airflow/dags:/opt/airflow/dags
      - ../airflow/logs:/opt/airflow/logs
      - ../airflow/plugins:/opt/airflow/plugins
      - ../airflow/requirements.txt:/opt/airflow/requirements.txt:ro
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    command: >
      bash -c "pip install -r /opt/airflow/requirements.txt && airflow webserver"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    user: "${AIRFLOW_UID:-50000}:0"
    networks:
      - nba_network

  airflow-scheduler:
    image: apache/airflow:2.10.1
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      airflow-webserver:
        condition: service_started
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      <<: *common-env
    volumes:
      - ../airflow:/opt/airflow
      - ../airflow/dags:/opt/airflow/dags
      - ../airflow/logs:/opt/airflow/logs
      - ../airflow/plugins:/opt/airflow/plugins
      - ../airflow/requirements.txt:/opt/airflow/requirements.txt:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      bash -c "pip install -r /opt/airflow/requirements.txt && airflow scheduler"
    user: "${AIRFLOW_UID:-50000}:0"
    networks:
      - nba_network

  airflow-init:
    image: apache/airflow:2.10.1
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      <<: *common-env
    volumes:
      - ../airflow:/opt/airflow
      - ../airflow/dags:/opt/airflow/dags
      - ../airflow/logs:/opt/airflow/logs
      - ../airflow/plugins:/opt/airflow/plugins
      - ../airflow/requirements.txt:/opt/airflow/requirements.txt:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      bash -c "
      pip install -r /opt/airflow/requirements.txt &&
      airflow db init &&
      airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin
      "
    user: "${AIRFLOW_UID:-50000}:0"
    networks:
      - nba_network

volumes:
  minio_data:
  postgres_data: